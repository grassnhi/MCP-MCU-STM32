
TRAFFIC_LIGHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080035d0  080035d0  000135d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003600  08003600  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003600  08003600  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003600  08003600  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000030  08003638  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003638  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000950c  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c44  00000000  00000000  00029565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d47  00000000  00000000  0002c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be09  00000000  00000000  000432a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082564  00000000  00000000  0004f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d0  00000000  00000000  000d1668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000030 	.word	0x20000030
 800012c:	00000000 	.word	0x00000000
 8000130:	080035b8 	.word	0x080035b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000034 	.word	0x20000034
 800014c:	080035b8 	.word	0x080035b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <display7SEG1>:
 *      Author: PC
 */

#include "display7SEG.h"

void display7SEG1(int num) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	const uint8_t sevenSegment[10] = {	0b00111111, // 0
 8000944:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <display7SEG1+0x10c>)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	c303      	stmia	r3!, {r0, r1}
 800094e:	801a      	strh	r2, [r3, #0]
											0b01111101, // 6
											0b00000111, // 7
											0b01111111, // 8
											0b01101111  // 9
		};
		HAL_GPIO_WritePin(SEG1a_GPIO_Port, SEG1a_Pin, (sevenSegment[num] & 0x01) ? RESET : SET);
 8000950:	f107 020c 	add.w	r2, r7, #12
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	2101      	movs	r1, #1
 800096c:	4837      	ldr	r0, [pc, #220]	; (8000a4c <display7SEG1+0x110>)
 800096e:	f001 fe02 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1b_GPIO_Port, SEG1b_Pin, (sevenSegment[num] & 0x02) ? RESET : SET);
 8000972:	f107 020c 	add.w	r2, r7, #12
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	f003 0302 	and.w	r3, r3, #2
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf0c      	ite	eq
 8000984:	2301      	moveq	r3, #1
 8000986:	2300      	movne	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	2102      	movs	r1, #2
 800098e:	482f      	ldr	r0, [pc, #188]	; (8000a4c <display7SEG1+0x110>)
 8000990:	f001 fdf1 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1c_GPIO_Port, SEG1c_Pin, (sevenSegment[num] & 0x04) ? RESET : SET);
 8000994:	f107 020c 	add.w	r2, r7, #12
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf0c      	ite	eq
 80009a6:	2301      	moveq	r3, #1
 80009a8:	2300      	movne	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	2104      	movs	r1, #4
 80009b0:	4826      	ldr	r0, [pc, #152]	; (8000a4c <display7SEG1+0x110>)
 80009b2:	f001 fde0 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1d_GPIO_Port, SEG1d_Pin, (sevenSegment[num] & 0x08) ? RESET : SET);
 80009b6:	f107 020c 	add.w	r2, r7, #12
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	f003 0308 	and.w	r3, r3, #8
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf0c      	ite	eq
 80009c8:	2301      	moveq	r3, #1
 80009ca:	2300      	movne	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	2108      	movs	r1, #8
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <display7SEG1+0x110>)
 80009d4:	f001 fdcf 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1e_GPIO_Port, SEG1e_Pin, (sevenSegment[num] & 0x10) ? RESET : SET);
 80009d8:	f107 020c 	add.w	r2, r7, #12
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	bf0c      	ite	eq
 80009ea:	2301      	moveq	r3, #1
 80009ec:	2300      	movne	r3, #0
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	2110      	movs	r1, #16
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <display7SEG1+0x110>)
 80009f6:	f001 fdbe 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1f_GPIO_Port, SEG1f_Pin, (sevenSegment[num] & 0x20) ? RESET : SET);
 80009fa:	f107 020c 	add.w	r2, r7, #12
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	f003 0320 	and.w	r3, r3, #32
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	2120      	movs	r1, #32
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <display7SEG1+0x110>)
 8000a18:	f001 fdad 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1g_GPIO_Port, SEG1g_Pin, (sevenSegment[num] & 0x40) ? RESET : SET);
 8000a1c:	f107 020c 	add.w	r2, r7, #12
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <display7SEG1+0x110>)
 8000a3a:	f001 fd9c 	bl	8002576 <HAL_GPIO_WritePin>
}
 8000a3e:	bf00      	nop
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	080035d0 	.word	0x080035d0
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <display7SEG2>:

void display7SEG2(int num){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	const uint8_t sevenSegment[10] = {	0b00111111, // 0
 8000a58:	4a43      	ldr	r2, [pc, #268]	; (8000b68 <display7SEG2+0x118>)
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a60:	c303      	stmia	r3!, {r0, r1}
 8000a62:	801a      	strh	r2, [r3, #0]
										0b01111101, // 6
										0b00000111, // 7
										0b01111111, // 8
										0b01101111  // 9
	};
	HAL_GPIO_WritePin(SEG2a_GPIO_Port, SEG2a_Pin, (sevenSegment[num] & 0x01) ? RESET : SET);
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	483a      	ldr	r0, [pc, #232]	; (8000b6c <display7SEG2+0x11c>)
 8000a82:	f001 fd78 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2b_GPIO_Port, SEG2b_Pin, (sevenSegment[num] & 0x02) ? RESET : SET);
 8000a86:	f107 020c 	add.w	r2, r7, #12
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	bf0c      	ite	eq
 8000a98:	2301      	moveq	r3, #1
 8000a9a:	2300      	movne	r3, #0
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa4:	4831      	ldr	r0, [pc, #196]	; (8000b6c <display7SEG2+0x11c>)
 8000aa6:	f001 fd66 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2c_GPIO_Port, SEG2c_Pin, (sevenSegment[num] & 0x04) ? RESET : SET);
 8000aaa:	f107 020c 	add.w	r2, r7, #12
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf0c      	ite	eq
 8000abc:	2301      	moveq	r3, #1
 8000abe:	2300      	movne	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac8:	4828      	ldr	r0, [pc, #160]	; (8000b6c <display7SEG2+0x11c>)
 8000aca:	f001 fd54 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2d_GPIO_Port, SEG2d_Pin, (sevenSegment[num] & 0x08) ? RESET : SET);
 8000ace:	f107 020c 	add.w	r2, r7, #12
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <display7SEG2+0x11c>)
 8000aee:	f001 fd42 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2e_GPIO_Port, SEG2e_Pin, (sevenSegment[num] & 0x10) ? RESET : SET);
 8000af2:	f107 020c 	add.w	r2, r7, #12
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <display7SEG2+0x11c>)
 8000b12:	f001 fd30 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2f_GPIO_Port, SEG2f_Pin, (sevenSegment[num] & 0x20) ? RESET : SET);
 8000b16:	f107 020c 	add.w	r2, r7, #12
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	f003 0320 	and.w	r3, r3, #32
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <display7SEG2+0x11c>)
 8000b36:	f001 fd1e 	bl	8002576 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2g_GPIO_Port, SEG2g_Pin, (sevenSegment[num] & 0x40) ? RESET : SET);
 8000b3a:	f107 020c 	add.w	r2, r7, #12
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <display7SEG2+0x11c>)
 8000b5a:	f001 fd0c 	bl	8002576 <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	080035d0 	.word	0x080035d0
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <update7SEG>:

int index_led = 0;
int led_buffer[4] = {1,2,3,4};
void update7SEG(int index){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	switch(index){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <update7SEG+0x16>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d026      	beq.n	8000bd2 <update7SEG+0x62>

		display7SEG1(led_buffer[2]);
		display7SEG2(led_buffer[3]);
		break;
	default:
		break;
 8000b84:	e04b      	b.n	8000c1e <update7SEG+0xae>
		index_led = 1;
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <update7SEG+0xb8>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <update7SEG+0xbc>)
 8000b94:	f001 fcef 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9e:	4823      	ldr	r0, [pc, #140]	; (8000c2c <update7SEG+0xbc>)
 8000ba0:	f001 fce9 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000baa:	4820      	ldr	r0, [pc, #128]	; (8000c2c <update7SEG+0xbc>)
 8000bac:	f001 fce3 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <update7SEG+0xbc>)
 8000bb8:	f001 fcdd 	bl	8002576 <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[0]);
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <update7SEG+0xc0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff febb 	bl	800093c <display7SEG1>
		display7SEG2(led_buffer[1]);
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <update7SEG+0xc0>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff40 	bl	8000a50 <display7SEG2>
		break;
 8000bd0:	e025      	b.n	8000c1e <update7SEG+0xae>
		index_led = 0;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <update7SEG+0xb8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bde:	4813      	ldr	r0, [pc, #76]	; (8000c2c <update7SEG+0xbc>)
 8000be0:	f001 fcc9 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <update7SEG+0xbc>)
 8000bec:	f001 fcc3 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <update7SEG+0xbc>)
 8000bf8:	f001 fcbd 	bl	8002576 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <update7SEG+0xbc>)
 8000c04:	f001 fcb7 	bl	8002576 <HAL_GPIO_WritePin>
		display7SEG1(led_buffer[2]);
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <update7SEG+0xc0>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe95 	bl	800093c <display7SEG1>
		display7SEG2(led_buffer[3]);
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <update7SEG+0xc0>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff1a 	bl	8000a50 <display7SEG2>
		break;
 8000c1c:	bf00      	nop
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000004c 	.word	0x2000004c
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	20000000 	.word	0x20000000

08000c34 <updateBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateBufferMode1() {
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
	if (counter1 <= RED) {
 8000c38:	4b95      	ldr	r3, [pc, #596]	; (8000e90 <updateBufferMode1+0x25c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b95      	ldr	r3, [pc, #596]	; (8000e94 <updateBufferMode1+0x260>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dc1f      	bgt.n	8000c84 <updateBufferMode1+0x50>
		led_buffer[0] = (RED - counter1) / 10;
 8000c44:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <updateBufferMode1+0x260>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <updateBufferMode1+0x25c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	4a92      	ldr	r2, [pc, #584]	; (8000e98 <updateBufferMode1+0x264>)
 8000c50:	fb82 1203 	smull	r1, r2, r2, r3
 8000c54:	1092      	asrs	r2, r2, #2
 8000c56:	17db      	asrs	r3, r3, #31
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	4a90      	ldr	r2, [pc, #576]	; (8000e9c <updateBufferMode1+0x268>)
 8000c5c:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1) % 10;
 8000c5e:	4b8d      	ldr	r3, [pc, #564]	; (8000e94 <updateBufferMode1+0x260>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b8b      	ldr	r3, [pc, #556]	; (8000e90 <updateBufferMode1+0x25c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1ad1      	subs	r1, r2, r3
 8000c68:	4b8b      	ldr	r3, [pc, #556]	; (8000e98 <updateBufferMode1+0x264>)
 8000c6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000c6e:	109a      	asrs	r2, r3, #2
 8000c70:	17cb      	asrs	r3, r1, #31
 8000c72:	1ad2      	subs	r2, r2, r3
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	1aca      	subs	r2, r1, r3
 8000c7e:	4b87      	ldr	r3, [pc, #540]	; (8000e9c <updateBufferMode1+0x268>)
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	e059      	b.n	8000d38 <updateBufferMode1+0x104>
	}
	else if (counter1 <= (RED + GREEN)) {
 8000c84:	4b83      	ldr	r3, [pc, #524]	; (8000e94 <updateBufferMode1+0x260>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b85      	ldr	r3, [pc, #532]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	4b80      	ldr	r3, [pc, #512]	; (8000e90 <updateBufferMode1+0x25c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	db25      	blt.n	8000ce2 <updateBufferMode1+0xae>
		led_buffer[0] = (RED + GREEN - counter1) / 10;
 8000c96:	4b7f      	ldr	r3, [pc, #508]	; (8000e94 <updateBufferMode1+0x260>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b81      	ldr	r3, [pc, #516]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	441a      	add	r2, r3
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <updateBufferMode1+0x25c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a7c      	ldr	r2, [pc, #496]	; (8000e98 <updateBufferMode1+0x264>)
 8000ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cac:	1092      	asrs	r2, r2, #2
 8000cae:	17db      	asrs	r3, r3, #31
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	4a7a      	ldr	r2, [pc, #488]	; (8000e9c <updateBufferMode1+0x268>)
 8000cb4:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1) % 10;
 8000cb6:	4b77      	ldr	r3, [pc, #476]	; (8000e94 <updateBufferMode1+0x260>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b79      	ldr	r3, [pc, #484]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	441a      	add	r2, r3
 8000cc0:	4b73      	ldr	r3, [pc, #460]	; (8000e90 <updateBufferMode1+0x25c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1ad1      	subs	r1, r2, r3
 8000cc6:	4b74      	ldr	r3, [pc, #464]	; (8000e98 <updateBufferMode1+0x264>)
 8000cc8:	fb83 2301 	smull	r2, r3, r3, r1
 8000ccc:	109a      	asrs	r2, r3, #2
 8000cce:	17cb      	asrs	r3, r1, #31
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	1aca      	subs	r2, r1, r3
 8000cdc:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <updateBufferMode1+0x268>)
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	e02a      	b.n	8000d38 <updateBufferMode1+0x104>
	}
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1) / 10;
 8000ce2:	4b6c      	ldr	r3, [pc, #432]	; (8000e94 <updateBufferMode1+0x260>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4b6e      	ldr	r3, [pc, #440]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	441a      	add	r2, r3
 8000cec:	4b6d      	ldr	r3, [pc, #436]	; (8000ea4 <updateBufferMode1+0x270>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	4b67      	ldr	r3, [pc, #412]	; (8000e90 <updateBufferMode1+0x25c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	4a67      	ldr	r2, [pc, #412]	; (8000e98 <updateBufferMode1+0x264>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	1092      	asrs	r2, r2, #2
 8000d00:	17db      	asrs	r3, r3, #31
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4a65      	ldr	r2, [pc, #404]	; (8000e9c <updateBufferMode1+0x268>)
 8000d06:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1) % 10;
 8000d08:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <updateBufferMode1+0x260>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b64      	ldr	r3, [pc, #400]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	441a      	add	r2, r3
 8000d12:	4b64      	ldr	r3, [pc, #400]	; (8000ea4 <updateBufferMode1+0x270>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	441a      	add	r2, r3
 8000d18:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <updateBufferMode1+0x25c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	1ad1      	subs	r1, r2, r3
 8000d1e:	4b5e      	ldr	r3, [pc, #376]	; (8000e98 <updateBufferMode1+0x264>)
 8000d20:	fb83 2301 	smull	r2, r3, r3, r1
 8000d24:	109a      	asrs	r2, r3, #2
 8000d26:	17cb      	asrs	r3, r1, #31
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1aca      	subs	r2, r1, r3
 8000d34:	4b59      	ldr	r3, [pc, #356]	; (8000e9c <updateBufferMode1+0x268>)
 8000d36:	605a      	str	r2, [r3, #4]
	}

	counter1++;
 8000d38:	4b55      	ldr	r3, [pc, #340]	; (8000e90 <updateBufferMode1+0x25c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	4a54      	ldr	r2, [pc, #336]	; (8000e90 <updateBufferMode1+0x25c>)
 8000d40:	6013      	str	r3, [r2, #0]
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 8000d42:	4b54      	ldr	r3, [pc, #336]	; (8000e94 <updateBufferMode1+0x260>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <updateBufferMode1+0x270>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	4b54      	ldr	r3, [pc, #336]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	441a      	add	r2, r3
 8000d52:	4b4f      	ldr	r3, [pc, #316]	; (8000e90 <updateBufferMode1+0x25c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	da02      	bge.n	8000d60 <updateBufferMode1+0x12c>
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <updateBufferMode1+0x25c>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

	/* --- */

	if (counter2 <= GREEN) {
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <updateBufferMode1+0x274>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dc1f      	bgt.n	8000dac <updateBufferMode1+0x178>
		led_buffer[2] = (GREEN - counter2) / 10;
 8000d6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <updateBufferMode1+0x274>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <updateBufferMode1+0x264>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1092      	asrs	r2, r2, #2
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <updateBufferMode1+0x268>)
 8000d84:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2) % 10;
 8000d86:	4b46      	ldr	r3, [pc, #280]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <updateBufferMode1+0x274>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad1      	subs	r1, r2, r3
 8000d90:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <updateBufferMode1+0x264>)
 8000d92:	fb83 2301 	smull	r2, r3, r3, r1
 8000d96:	109a      	asrs	r2, r3, #2
 8000d98:	17cb      	asrs	r3, r1, #31
 8000d9a:	1ad2      	subs	r2, r2, r3
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	1aca      	subs	r2, r1, r3
 8000da6:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <updateBufferMode1+0x268>)
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	e059      	b.n	8000e60 <updateBufferMode1+0x22c>
	}
	else if (counter2 <= (AMBER + GREEN)) {
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <updateBufferMode1+0x270>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	441a      	add	r2, r3
 8000db6:	4b3c      	ldr	r3, [pc, #240]	; (8000ea8 <updateBufferMode1+0x274>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	db25      	blt.n	8000e0a <updateBufferMode1+0x1d6>
		led_buffer[2] = (AMBER + GREEN - counter2) / 10;
 8000dbe:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <updateBufferMode1+0x270>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <updateBufferMode1+0x274>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <updateBufferMode1+0x264>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	1092      	asrs	r2, r2, #2
 8000dd6:	17db      	asrs	r3, r3, #31
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <updateBufferMode1+0x268>)
 8000ddc:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2) % 10;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <updateBufferMode1+0x270>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	441a      	add	r2, r3
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <updateBufferMode1+0x274>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1ad1      	subs	r1, r2, r3
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <updateBufferMode1+0x264>)
 8000df0:	fb83 2301 	smull	r2, r3, r3, r1
 8000df4:	109a      	asrs	r2, r3, #2
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <updateBufferMode1+0x268>)
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	e02a      	b.n	8000e60 <updateBufferMode1+0x22c>
	}
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2) / 10;
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <updateBufferMode1+0x260>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	441a      	add	r2, r3
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <updateBufferMode1+0x270>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	441a      	add	r2, r3
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <updateBufferMode1+0x264>)
 8000e22:	fb82 1203 	smull	r1, r2, r2, r3
 8000e26:	1092      	asrs	r2, r2, #2
 8000e28:	17db      	asrs	r3, r3, #31
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <updateBufferMode1+0x268>)
 8000e2e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2) % 10;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <updateBufferMode1+0x260>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	441a      	add	r2, r3
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <updateBufferMode1+0x270>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	441a      	add	r2, r3
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <updateBufferMode1+0x264>)
 8000e48:	fb83 2301 	smull	r2, r3, r3, r1
 8000e4c:	109a      	asrs	r2, r3, #2
 8000e4e:	17cb      	asrs	r3, r1, #31
 8000e50:	1ad2      	subs	r2, r2, r3
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	1aca      	subs	r2, r1, r3
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <updateBufferMode1+0x268>)
 8000e5e:	60da      	str	r2, [r3, #12]
	}

	counter2++;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e68:	6013      	str	r3, [r2, #0]
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <updateBufferMode1+0x260>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <updateBufferMode1+0x270>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	441a      	add	r2, r3
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <updateBufferMode1+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	441a      	add	r2, r3
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	da02      	bge.n	8000e88 <updateBufferMode1+0x254>
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <updateBufferMode1+0x274>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	20000010 	.word	0x20000010
 8000e94:	20000018 	.word	0x20000018
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000020 	.word	0x20000020
 8000ea4:	2000001c 	.word	0x2000001c
 8000ea8:	20000014 	.word	0x20000014

08000eac <updateBufferMode2>:

void updateBufferMode2() {
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <updateBufferMode2+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <updateBufferMode2+0x4c>)
 8000eb8:	2202      	movs	r2, #2
 8000eba:	605a      	str	r2, [r3, #4]

	led_buffer[2] = RED / 10;
 8000ebc:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <updateBufferMode2+0x50>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <updateBufferMode2+0x54>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	1092      	asrs	r2, r2, #2
 8000ec8:	17db      	asrs	r3, r3, #31
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <updateBufferMode2+0x4c>)
 8000ece:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <updateBufferMode2+0x50>)
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <updateBufferMode2+0x54>)
 8000ed6:	fb83 2301 	smull	r2, r3, r3, r1
 8000eda:	109a      	asrs	r2, r3, #2
 8000edc:	17cb      	asrs	r3, r1, #31
 8000ede:	1ad2      	subs	r2, r2, r3
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	1aca      	subs	r2, r1, r3
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <updateBufferMode2+0x4c>)
 8000eec:	60da      	str	r2, [r3, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000018 	.word	0x20000018
 8000f00:	66666667 	.word	0x66666667

08000f04 <updateBufferMode3>:

void updateBufferMode3() {
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <updateBufferMode3+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <updateBufferMode3+0x4c>)
 8000f10:	2203      	movs	r2, #3
 8000f12:	605a      	str	r2, [r3, #4]

	led_buffer[2] = AMBER / 10;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <updateBufferMode3+0x50>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <updateBufferMode3+0x54>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1092      	asrs	r2, r2, #2
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a0a      	ldr	r2, [pc, #40]	; (8000f50 <updateBufferMode3+0x4c>)
 8000f26:	6093      	str	r3, [r2, #8]
	led_buffer[3] = AMBER % 10;
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <updateBufferMode3+0x50>)
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <updateBufferMode3+0x54>)
 8000f2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f32:	109a      	asrs	r2, r3, #2
 8000f34:	17cb      	asrs	r3, r1, #31
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	1aca      	subs	r2, r1, r3
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <updateBufferMode3+0x4c>)
 8000f44:	60da      	str	r2, [r3, #12]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	2000001c 	.word	0x2000001c
 8000f58:	66666667 	.word	0x66666667

08000f5c <updateBufferMode4>:

void updateBufferMode4() {
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	led_buffer[0] = 0;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <updateBufferMode4+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <updateBufferMode4+0x4c>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	605a      	str	r2, [r3, #4]

	led_buffer[2] = GREEN / 10;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <updateBufferMode4+0x50>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <updateBufferMode4+0x54>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1092      	asrs	r2, r2, #2
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <updateBufferMode4+0x4c>)
 8000f7e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <updateBufferMode4+0x50>)
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <updateBufferMode4+0x54>)
 8000f86:	fb83 2301 	smull	r2, r3, r3, r1
 8000f8a:	109a      	asrs	r2, r3, #2
 8000f8c:	17cb      	asrs	r3, r1, #31
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	1aca      	subs	r2, r1, r3
 8000f9a:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <updateBufferMode4+0x4c>)
 8000f9c:	60da      	str	r2, [r3, #12]
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000020 	.word	0x20000020
 8000fb0:	66666667 	.word	0x66666667

08000fb4 <traffic_light>:
 *      Author: PC
 */

#include "displayLED.h"

void traffic_light(int color) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b0e      	cmp	r3, #14
 8000fc0:	d859      	bhi.n	8001076 <traffic_light+0xc2>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <traffic_light+0x14>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001005 	.word	0x08001005
 8000fcc:	08001077 	.word	0x08001077
 8000fd0:	08001077 	.word	0x08001077
 8000fd4:	08001077 	.word	0x08001077
 8000fd8:	08001077 	.word	0x08001077
 8000fdc:	08001077 	.word	0x08001077
 8000fe0:	08001077 	.word	0x08001077
 8000fe4:	08001077 	.word	0x08001077
 8000fe8:	08001077 	.word	0x08001077
 8000fec:	08001077 	.word	0x08001077
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001013 	.word	0x08001013
 8000ff8:	0800102d 	.word	0x0800102d
 8000ffc:	08001047 	.word	0x08001047
 8001000:	0800105f 	.word	0x0800105f
	switch (color) {
		case INIT:
			HAL_GPIO_WritePin(GPIOA, R1_Pin | G1_Pin | A1_Pin | R2_Pin | G2_Pin | A2_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <traffic_light+0xcc>)
 800100c:	f001 fab3 	bl	8002576 <HAL_GPIO_WritePin>
			break;
 8001010:	e032      	b.n	8001078 <traffic_light+0xc4>
		case AUTO_RED1_GREEN2:
			HAL_GPIO_WritePin(GPIOA, R1_Pin | G2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001018:	4819      	ldr	r0, [pc, #100]	; (8001080 <traffic_light+0xcc>)
 800101a:	f001 faac 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, G1_Pin | A1_Pin | R2_Pin | A2_Pin, GPIO_PIN_SET);
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <traffic_light+0xcc>)
 8001026:	f001 faa6 	bl	8002576 <HAL_GPIO_WritePin>
			break;
 800102a:	e025      	b.n	8001078 <traffic_light+0xc4>
		case AUTO_RED1_AMBER2:
			HAL_GPIO_WritePin(GPIOA, R1_Pin | A2_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <traffic_light+0xcc>)
 8001034:	f001 fa9f 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, G1_Pin | A1_Pin | G2_Pin | R2_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800103e:	4810      	ldr	r0, [pc, #64]	; (8001080 <traffic_light+0xcc>)
 8001040:	f001 fa99 	bl	8002576 <HAL_GPIO_WritePin>
			break;
 8001044:	e018      	b.n	8001078 <traffic_light+0xc4>
		case AUTO_GREEN1_RED2:
			HAL_GPIO_WritePin(GPIOA, G1_Pin | R2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	21c0      	movs	r1, #192	; 0xc0
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <traffic_light+0xcc>)
 800104c:	f001 fa93 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, R1_Pin | A1_Pin | G2_Pin | A2_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <traffic_light+0xcc>)
 8001058:	f001 fa8d 	bl	8002576 <HAL_GPIO_WritePin>
			break;
 800105c:	e00c      	b.n	8001078 <traffic_light+0xc4>
        case AUTO_AMBER1_RED2:
			HAL_GPIO_WritePin(GPIOA, A1_Pin | R2_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	21a0      	movs	r1, #160	; 0xa0
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <traffic_light+0xcc>)
 8001064:	f001 fa87 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, G1_Pin | R1_Pin |  G2_Pin | A2_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7154 	mov.w	r1, #848	; 0x350
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <traffic_light+0xcc>)
 8001070:	f001 fa81 	bl	8002576 <HAL_GPIO_WritePin>
			break;
 8001074:	e000      	b.n	8001078 <traffic_light+0xc4>
		default:
			break;
 8001076:	bf00      	nop
	}
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010800 	.word	0x40010800

08001084 <set_blinky>:

void set_blinky(int color) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b29      	cmp	r3, #41	; 0x29
 8001090:	d04f      	beq.n	8001132 <set_blinky+0xae>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b29      	cmp	r3, #41	; 0x29
 8001096:	dc58      	bgt.n	800114a <set_blinky+0xc6>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b1f      	cmp	r3, #31
 800109c:	d039      	beq.n	8001112 <set_blinky+0x8e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b1f      	cmp	r3, #31
 80010a2:	dc52      	bgt.n	800114a <set_blinky+0xc6>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <set_blinky+0x2e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b15      	cmp	r3, #21
 80010ae:	d021      	beq.n	80010f4 <set_blinky+0x70>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA, R1_Pin | A1_Pin | R2_Pin | A2_Pin, GPIO_PIN_SET);
			HAL_GPIO_TogglePin(GPIOA, G1_Pin | G2_Pin);
			break;
		default:
			break;
 80010b0:	e04b      	b.n	800114a <set_blinky+0xc6>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	4827      	ldr	r0, [pc, #156]	; (8001154 <set_blinky+0xd0>)
 80010b8:	f001 fa5d 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <set_blinky+0xd0>)
 80010c2:	f001 fa58 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2120      	movs	r1, #32
 80010ca:	4822      	ldr	r0, [pc, #136]	; (8001154 <set_blinky+0xd0>)
 80010cc:	f001 fa53 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	481f      	ldr	r0, [pc, #124]	; (8001154 <set_blinky+0xd0>)
 80010d8:	f001 fa4d 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	481c      	ldr	r0, [pc, #112]	; (8001154 <set_blinky+0xd0>)
 80010e2:	f001 fa48 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <set_blinky+0xd0>)
 80010ee:	f001 fa42 	bl	8002576 <HAL_GPIO_WritePin>
            break;
 80010f2:	e02b      	b.n	800114c <set_blinky+0xc8>
			HAL_GPIO_WritePin(GPIOA, G1_Pin | A1_Pin | G2_Pin | A2_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7158 	mov.w	r1, #864	; 0x360
 80010fa:	4816      	ldr	r0, [pc, #88]	; (8001154 <set_blinky+0xd0>)
 80010fc:	f001 fa3b 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8001100:	2110      	movs	r1, #16
 8001102:	4814      	ldr	r0, [pc, #80]	; (8001154 <set_blinky+0xd0>)
 8001104:	f001 fa4f 	bl	80025a6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	4812      	ldr	r0, [pc, #72]	; (8001154 <set_blinky+0xd0>)
 800110c:	f001 fa4b 	bl	80025a6 <HAL_GPIO_TogglePin>
			break;
 8001110:	e01c      	b.n	800114c <set_blinky+0xc8>
			HAL_GPIO_WritePin(GPIOA, R1_Pin | G1_Pin | R2_Pin | G2_Pin , GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <set_blinky+0xd0>)
 800111a:	f001 fa2c 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 800111e:	2120      	movs	r1, #32
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <set_blinky+0xd0>)
 8001122:	f001 fa40 	bl	80025a6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	480a      	ldr	r0, [pc, #40]	; (8001154 <set_blinky+0xd0>)
 800112c:	f001 fa3b 	bl	80025a6 <HAL_GPIO_TogglePin>
			break;
 8001130:	e00c      	b.n	800114c <set_blinky+0xc8>
			HAL_GPIO_WritePin(GPIOA, R1_Pin | A1_Pin | R2_Pin | A2_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001138:	4806      	ldr	r0, [pc, #24]	; (8001154 <set_blinky+0xd0>)
 800113a:	f001 fa1c 	bl	8002576 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, G1_Pin | G2_Pin);
 800113e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <set_blinky+0xd0>)
 8001144:	f001 fa2f 	bl	80025a6 <HAL_GPIO_TogglePin>
			break;
 8001148:	e000      	b.n	800114c <set_blinky+0xc8>
			break;
 800114a:	bf00      	nop
	}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40010800 	.word	0x40010800

08001158 <fsm_automatic_run>:
 *      Author: PC
 */

#include "fsm_automatic.h"

void fsm_automatic_run() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	switch(status){
 800115c:	4b9f      	ldr	r3, [pc, #636]	; (80013dc <fsm_automatic_run+0x284>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b0e      	cmp	r3, #14
 8001162:	f200 8130 	bhi.w	80013c6 <fsm_automatic_run+0x26e>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <fsm_automatic_run+0x14>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011b1 	.word	0x080011b1
 8001174:	080013c7 	.word	0x080013c7
 8001178:	080013c7 	.word	0x080013c7
 800117c:	080013c7 	.word	0x080013c7
 8001180:	080013c7 	.word	0x080013c7
 8001184:	080013c7 	.word	0x080013c7
 8001188:	080013c7 	.word	0x080013c7
 800118c:	080013c7 	.word	0x080013c7
 8001190:	080013c7 	.word	0x080013c7
 8001194:	080013c7 	.word	0x080013c7
 8001198:	0800120d 	.word	0x0800120d
 800119c:	0800127d 	.word	0x0800127d
 80011a0:	080012eb 	.word	0x080012eb
 80011a4:	08001359 	.word	0x08001359

//----------------------------------------------------------------------------------------------
// MODE INIT
	case INIT:
		status = MODE1;
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <fsm_automatic_run+0x284>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
		break;
 80011ae:	e113      	b.n	80013d8 <fsm_automatic_run+0x280>


//----------------------------------------------------------------------------------------------
// MODE 1
	case MODE1:
		status = AUTO_RED1_GREEN2;
 80011b0:	4b8a      	ldr	r3, [pc, #552]	; (80013dc <fsm_automatic_run+0x284>)
 80011b2:	220b      	movs	r2, #11
 80011b4:	601a      	str	r2, [r3, #0]

		traffic_light(INIT);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff fefc 	bl	8000fb4 <traffic_light>

		counter1 = 1;
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <fsm_automatic_run+0x288>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
		counter2 = 1;
 80011c2:	4b88      	ldr	r3, [pc, #544]	; (80013e4 <fsm_automatic_run+0x28c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
		index_led = 0;
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <fsm_automatic_run+0x290>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]

		updateBufferMode1();
 80011ce:	f7ff fd31 	bl	8000c34 <updateBufferMode1>
		update7SEG(index_led);
 80011d2:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <fsm_automatic_run+0x290>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fcca 	bl	8000b70 <update7SEG>

		setTimer(0, GREEN * 1000);	// Timer AUTO_RED1_GREEN2
 80011dc:	4b83      	ldr	r3, [pc, #524]	; (80013ec <fsm_automatic_run+0x294>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 fda8 	bl	8001d40 <setTimer>
		setTimer(1, 1000);			// Timer updateBufferMode1
 80011f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f4:	2001      	movs	r0, #1
 80011f6:	f000 fda3 	bl	8001d40 <setTimer>
		setTimer(2, 500);			// Timer LED 7-SEG
 80011fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011fe:	2002      	movs	r0, #2
 8001200:	f000 fd9e 	bl	8001d40 <setTimer>
		clearTimer(3);				// Timer blinking LED
 8001204:	2003      	movs	r0, #3
 8001206:	f000 fdb9 	bl	8001d7c <clearTimer>

		break;
 800120a:	e0e5      	b.n	80013d8 <fsm_automatic_run+0x280>

	case AUTO_RED1_GREEN2:
		traffic_light(AUTO_RED1_GREEN2);
 800120c:	200b      	movs	r0, #11
 800120e:	f7ff fed1 	bl	8000fb4 <traffic_light>

		if (timer_flag[0] == 1) {
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <fsm_automatic_run+0x298>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10c      	bne.n	8001234 <fsm_automatic_run+0xdc>
			status = AUTO_RED1_AMBER2;
 800121a:	4b70      	ldr	r3, [pc, #448]	; (80013dc <fsm_automatic_run+0x284>)
 800121c:	220c      	movs	r2, #12
 800121e:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 8001220:	4b74      	ldr	r3, [pc, #464]	; (80013f4 <fsm_automatic_run+0x29c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4619      	mov	r1, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f000 fd86 	bl	8001d40 <setTimer>
		}
		if (timer_flag[1] == 1) {
 8001234:	4b6e      	ldr	r3, [pc, #440]	; (80013f0 <fsm_automatic_run+0x298>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <fsm_automatic_run+0xf2>
			updateBufferMode1();
 800123c:	f7ff fcfa 	bl	8000c34 <updateBufferMode1>
			setTimer(1, 1000);
 8001240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001244:	2001      	movs	r0, #1
 8001246:	f000 fd7b 	bl	8001d40 <setTimer>
		}
		if (timer_flag[2] == 1) {
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <fsm_automatic_run+0x298>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d109      	bne.n	8001266 <fsm_automatic_run+0x10e>
			update7SEG(index_led);
 8001252:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <fsm_automatic_run+0x290>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc8a 	bl	8000b70 <update7SEG>
			setTimer(2, 500);
 800125c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001260:	2002      	movs	r0, #2
 8001262:	f000 fd6d 	bl	8001d40 <setTimer>
		}
		if (check_button_pressed(0) == 1) {
 8001266:	2000      	movs	r0, #0
 8001268:	f000 fb40 	bl	80018ec <check_button_pressed>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	f040 80ab 	bne.w	80013ca <fsm_automatic_run+0x272>
			status = MODE2;
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <fsm_automatic_run+0x284>)
 8001276:	2202      	movs	r2, #2
 8001278:	601a      	str	r2, [r3, #0]
		}
		break;
 800127a:	e0a6      	b.n	80013ca <fsm_automatic_run+0x272>

	case AUTO_RED1_AMBER2:
		traffic_light(AUTO_RED1_AMBER2);
 800127c:	200c      	movs	r0, #12
 800127e:	f7ff fe99 	bl	8000fb4 <traffic_light>

		if (timer_flag[0] == 1) {
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <fsm_automatic_run+0x298>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10c      	bne.n	80012a4 <fsm_automatic_run+0x14c>
			status = AUTO_GREEN1_RED2;
 800128a:	4b54      	ldr	r3, [pc, #336]	; (80013dc <fsm_automatic_run+0x284>)
 800128c:	220d      	movs	r2, #13
 800128e:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <fsm_automatic_run+0x294>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4619      	mov	r1, r3
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 fd4e 	bl	8001d40 <setTimer>
		}
		if (timer_flag[1] == 1) {
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <fsm_automatic_run+0x298>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d106      	bne.n	80012ba <fsm_automatic_run+0x162>
			updateBufferMode1();
 80012ac:	f7ff fcc2 	bl	8000c34 <updateBufferMode1>
			setTimer(1, 1000);
 80012b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fd43 	bl	8001d40 <setTimer>
		}
		if (timer_flag[2] == 1) {
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <fsm_automatic_run+0x298>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d109      	bne.n	80012d6 <fsm_automatic_run+0x17e>
			update7SEG(index_led);
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <fsm_automatic_run+0x290>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc52 	bl	8000b70 <update7SEG>
			setTimer(2, 500);
 80012cc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012d0:	2002      	movs	r0, #2
 80012d2:	f000 fd35 	bl	8001d40 <setTimer>
		}
		if (check_button_pressed(0) == 1) {
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fb08 	bl	80018ec <check_button_pressed>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d175      	bne.n	80013ce <fsm_automatic_run+0x276>
			status = MODE2;
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <fsm_automatic_run+0x284>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
		}
		break;
 80012e8:	e071      	b.n	80013ce <fsm_automatic_run+0x276>

	case AUTO_GREEN1_RED2:
		traffic_light(AUTO_GREEN1_RED2);
 80012ea:	200d      	movs	r0, #13
 80012ec:	f7ff fe62 	bl	8000fb4 <traffic_light>

		if (timer_flag[0] == 1) {
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <fsm_automatic_run+0x298>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d10c      	bne.n	8001312 <fsm_automatic_run+0x1ba>
			status = AUTO_AMBER1_RED2;
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <fsm_automatic_run+0x284>)
 80012fa:	220e      	movs	r2, #14
 80012fc:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 80012fe:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <fsm_automatic_run+0x29c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4619      	mov	r1, r3
 800130c:	2000      	movs	r0, #0
 800130e:	f000 fd17 	bl	8001d40 <setTimer>
		}
		if (timer_flag[1] == 1) {
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <fsm_automatic_run+0x298>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d106      	bne.n	8001328 <fsm_automatic_run+0x1d0>
			updateBufferMode1();
 800131a:	f7ff fc8b 	bl	8000c34 <updateBufferMode1>
			setTimer(1, 1000);
 800131e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001322:	2001      	movs	r0, #1
 8001324:	f000 fd0c 	bl	8001d40 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <fsm_automatic_run+0x298>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d109      	bne.n	8001344 <fsm_automatic_run+0x1ec>
			update7SEG(index_led);
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <fsm_automatic_run+0x290>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fc1b 	bl	8000b70 <update7SEG>
			setTimer(2, 500);
 800133a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800133e:	2002      	movs	r0, #2
 8001340:	f000 fcfe 	bl	8001d40 <setTimer>
		}
		if (check_button_pressed(0) == 1) {
 8001344:	2000      	movs	r0, #0
 8001346:	f000 fad1 	bl	80018ec <check_button_pressed>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d140      	bne.n	80013d2 <fsm_automatic_run+0x27a>
			status = MODE2;
 8001350:	4b22      	ldr	r3, [pc, #136]	; (80013dc <fsm_automatic_run+0x284>)
 8001352:	2202      	movs	r2, #2
 8001354:	601a      	str	r2, [r3, #0]
		}
		break;
 8001356:	e03c      	b.n	80013d2 <fsm_automatic_run+0x27a>

	case AUTO_AMBER1_RED2:
		traffic_light(AUTO_AMBER1_RED2);
 8001358:	200e      	movs	r0, #14
 800135a:	f7ff fe2b 	bl	8000fb4 <traffic_light>

		if (timer_flag[0] == 1) {
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <fsm_automatic_run+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10c      	bne.n	8001380 <fsm_automatic_run+0x228>
			status = AUTO_RED1_GREEN2;
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <fsm_automatic_run+0x284>)
 8001368:	220b      	movs	r2, #11
 800136a:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <fsm_automatic_run+0x294>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4619      	mov	r1, r3
 800137a:	2000      	movs	r0, #0
 800137c:	f000 fce0 	bl	8001d40 <setTimer>
		}
		if (timer_flag[1] == 1) {
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <fsm_automatic_run+0x298>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d106      	bne.n	8001396 <fsm_automatic_run+0x23e>
			updateBufferMode1();
 8001388:	f7ff fc54 	bl	8000c34 <updateBufferMode1>
			setTimer(1, 1000);
 800138c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001390:	2001      	movs	r0, #1
 8001392:	f000 fcd5 	bl	8001d40 <setTimer>
		}
		if (timer_flag[2] == 1) {
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <fsm_automatic_run+0x298>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d109      	bne.n	80013b2 <fsm_automatic_run+0x25a>
			update7SEG(index_led);
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <fsm_automatic_run+0x290>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fbe4 	bl	8000b70 <update7SEG>
			setTimer(2, 500);
 80013a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ac:	2002      	movs	r0, #2
 80013ae:	f000 fcc7 	bl	8001d40 <setTimer>
		}
		if (check_button_pressed(0) == 1) {
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 fa9a 	bl	80018ec <check_button_pressed>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10b      	bne.n	80013d6 <fsm_automatic_run+0x27e>
			status = MODE2;
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <fsm_automatic_run+0x284>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
		}
		break;
 80013c4:	e007      	b.n	80013d6 <fsm_automatic_run+0x27e>


//--------------------------------------------------------------------------------------
// DEFAULT
	default:
		break;
 80013c6:	bf00      	nop
 80013c8:	e006      	b.n	80013d8 <fsm_automatic_run+0x280>
		break;
 80013ca:	bf00      	nop
 80013cc:	e004      	b.n	80013d8 <fsm_automatic_run+0x280>
		break;
 80013ce:	bf00      	nop
 80013d0:	e002      	b.n	80013d8 <fsm_automatic_run+0x280>
		break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <fsm_automatic_run+0x280>
		break;
 80013d6:	bf00      	nop
	}
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000050 	.word	0x20000050
 80013e0:	20000010 	.word	0x20000010
 80013e4:	20000014 	.word	0x20000014
 80013e8:	2000004c 	.word	0x2000004c
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20000080 	.word	0x20000080
 80013f4:	2000001c 	.word	0x2000001c

080013f8 <fsm_manual_run>:
 *      Author: PC
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	switch(status){
 80013fc:	4bc3      	ldr	r3, [pc, #780]	; (800170c <fsm_manual_run+0x314>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3b02      	subs	r3, #2
 8001402:	2b28      	cmp	r3, #40	; 0x28
 8001404:	f200 8257 	bhi.w	80018b6 <fsm_manual_run+0x4be>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <fsm_manual_run+0x18>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	080014b5 	.word	0x080014b5
 8001414:	080015fb 	.word	0x080015fb
 8001418:	08001769 	.word	0x08001769
 800141c:	080018b7 	.word	0x080018b7
 8001420:	080018b7 	.word	0x080018b7
 8001424:	080018b7 	.word	0x080018b7
 8001428:	080018b7 	.word	0x080018b7
 800142c:	080018b7 	.word	0x080018b7
 8001430:	080018b7 	.word	0x080018b7
 8001434:	080018b7 	.word	0x080018b7
 8001438:	080018b7 	.word	0x080018b7
 800143c:	080018b7 	.word	0x080018b7
 8001440:	080018b7 	.word	0x080018b7
 8001444:	080018b7 	.word	0x080018b7
 8001448:	080018b7 	.word	0x080018b7
 800144c:	080018b7 	.word	0x080018b7
 8001450:	080018b7 	.word	0x080018b7
 8001454:	080018b7 	.word	0x080018b7
 8001458:	080018b7 	.word	0x080018b7
 800145c:	080014f7 	.word	0x080014f7
 8001460:	08001575 	.word	0x08001575
 8001464:	080018b7 	.word	0x080018b7
 8001468:	080018b7 	.word	0x080018b7
 800146c:	080018b7 	.word	0x080018b7
 8001470:	080018b7 	.word	0x080018b7
 8001474:	080018b7 	.word	0x080018b7
 8001478:	080018b7 	.word	0x080018b7
 800147c:	080018b7 	.word	0x080018b7
 8001480:	080018b7 	.word	0x080018b7
 8001484:	0800163d 	.word	0x0800163d
 8001488:	080016b7 	.word	0x080016b7
 800148c:	080018b7 	.word	0x080018b7
 8001490:	080018b7 	.word	0x080018b7
 8001494:	080018b7 	.word	0x080018b7
 8001498:	080018b7 	.word	0x080018b7
 800149c:	080018b7 	.word	0x080018b7
 80014a0:	080018b7 	.word	0x080018b7
 80014a4:	080018b7 	.word	0x080018b7
 80014a8:	080018b7 	.word	0x080018b7
 80014ac:	080017ab 	.word	0x080017ab
 80014b0:	0800182d 	.word	0x0800182d
	case MODE2:
			set_blinky(INIT);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fde5 	bl	8001084 <set_blinky>

			index_led = 0;
 80014ba:	4b95      	ldr	r3, [pc, #596]	; (8001710 <fsm_manual_run+0x318>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
			updateBufferMode2();
 80014c0:	f7ff fcf4 	bl	8000eac <updateBufferMode2>
			update7SEG(index_led);
 80014c4:	4b92      	ldr	r3, [pc, #584]	; (8001710 <fsm_manual_run+0x318>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb51 	bl	8000b70 <update7SEG>

			setTimer(2, 500);
 80014ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 fc34 	bl	8001d40 <setTimer>
			setTimer(3, 500);
 80014d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 fc2f 	bl	8001d40 <setTimer>
			clearTimer(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fc4a 	bl	8001d7c <clearTimer>
			clearTimer(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fc47 	bl	8001d7c <clearTimer>

			status = AUTO_RED;
 80014ee:	4b87      	ldr	r3, [pc, #540]	; (800170c <fsm_manual_run+0x314>)
 80014f0:	2215      	movs	r2, #21
 80014f2:	601a      	str	r2, [r3, #0]

			break;
 80014f4:	e1ec      	b.n	80018d0 <fsm_manual_run+0x4d8>

		case AUTO_RED:
			if (timer_flag[3] == 1) {
 80014f6:	4b87      	ldr	r3, [pc, #540]	; (8001714 <fsm_manual_run+0x31c>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <fsm_manual_run+0x116>
				setTimer(3, 500);
 80014fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001502:	2003      	movs	r0, #3
 8001504:	f000 fc1c 	bl	8001d40 <setTimer>
				set_blinky(AUTO_RED);
 8001508:	2015      	movs	r0, #21
 800150a:	f7ff fdbb 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <fsm_manual_run+0x31c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d10b      	bne.n	800152e <fsm_manual_run+0x136>
				setTimer(2, 500);
 8001516:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800151a:	2002      	movs	r0, #2
 800151c:	f000 fc10 	bl	8001d40 <setTimer>
				updateBufferMode2();
 8001520:	f7ff fcc4 	bl	8000eac <updateBufferMode2>
				update7SEG(index_led);
 8001524:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <fsm_manual_run+0x318>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb21 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(0) == 1) {
 800152e:	2000      	movs	r0, #0
 8001530:	f000 f9dc 	bl	80018ec <check_button_pressed>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <fsm_manual_run+0x148>
				status = MODE3;
 800153a:	4b74      	ldr	r3, [pc, #464]	; (800170c <fsm_manual_run+0x314>)
 800153c:	2203      	movs	r2, #3
 800153e:	601a      	str	r2, [r3, #0]
			}
			if (check_button_pressed(1) == 1) {
 8001540:	2001      	movs	r0, #1
 8001542:	f000 f9d3 	bl	80018ec <check_button_pressed>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	f040 81b6 	bne.w	80018ba <fsm_manual_run+0x4c2>
				status = ADJ_RED;
 800154e:	4b6f      	ldr	r3, [pc, #444]	; (800170c <fsm_manual_run+0x314>)
 8001550:	2216      	movs	r2, #22
 8001552:	601a      	str	r2, [r3, #0]
				if (RED >= 99) RED = AMBER + 1;
 8001554:	4b70      	ldr	r3, [pc, #448]	; (8001718 <fsm_manual_run+0x320>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b62      	cmp	r3, #98	; 0x62
 800155a:	dd05      	ble.n	8001568 <fsm_manual_run+0x170>
 800155c:	4b6f      	ldr	r3, [pc, #444]	; (800171c <fsm_manual_run+0x324>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a6d      	ldr	r2, [pc, #436]	; (8001718 <fsm_manual_run+0x320>)
 8001564:	6013      	str	r3, [r2, #0]
				else RED++;
			}
			break;
 8001566:	e1a8      	b.n	80018ba <fsm_manual_run+0x4c2>
				else RED++;
 8001568:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <fsm_manual_run+0x320>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <fsm_manual_run+0x320>)
 8001570:	6013      	str	r3, [r2, #0]
			break;
 8001572:	e1a2      	b.n	80018ba <fsm_manual_run+0x4c2>

		case ADJ_RED:
			if (timer_flag[3] == 1) {
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <fsm_manual_run+0x31c>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <fsm_manual_run+0x194>
				setTimer(3, 500);
 800157c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001580:	2003      	movs	r0, #3
 8001582:	f000 fbdd 	bl	8001d40 <setTimer>
				set_blinky(AUTO_RED);
 8001586:	2015      	movs	r0, #21
 8001588:	f7ff fd7c 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 800158c:	4b61      	ldr	r3, [pc, #388]	; (8001714 <fsm_manual_run+0x31c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d10b      	bne.n	80015ac <fsm_manual_run+0x1b4>
				setTimer(2, 500);
 8001594:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001598:	2002      	movs	r0, #2
 800159a:	f000 fbd1 	bl	8001d40 <setTimer>
				updateBufferMode2();
 800159e:	f7ff fc85 	bl	8000eac <updateBufferMode2>
				update7SEG(index_led);
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <fsm_manual_run+0x318>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fae2 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(1) == 1) {
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 f99d 	bl	80018ec <check_button_pressed>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d10e      	bne.n	80015d6 <fsm_manual_run+0x1de>
				if (RED >= 99) RED = AMBER + 1;
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <fsm_manual_run+0x320>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b62      	cmp	r3, #98	; 0x62
 80015be:	dd05      	ble.n	80015cc <fsm_manual_run+0x1d4>
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <fsm_manual_run+0x324>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	4a54      	ldr	r2, [pc, #336]	; (8001718 <fsm_manual_run+0x320>)
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e004      	b.n	80015d6 <fsm_manual_run+0x1de>
				else RED++;
 80015cc:	4b52      	ldr	r3, [pc, #328]	; (8001718 <fsm_manual_run+0x320>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a51      	ldr	r2, [pc, #324]	; (8001718 <fsm_manual_run+0x320>)
 80015d4:	6013      	str	r3, [r2, #0]
			}
			if (check_button_pressed(2) == 1) {
 80015d6:	2002      	movs	r0, #2
 80015d8:	f000 f988 	bl	80018ec <check_button_pressed>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 816d 	bne.w	80018be <fsm_manual_run+0x4c6>
				status = AUTO_RED;
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <fsm_manual_run+0x314>)
 80015e6:	2215      	movs	r2, #21
 80015e8:	601a      	str	r2, [r3, #0]
				GREEN = RED - AMBER;
 80015ea:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <fsm_manual_run+0x320>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <fsm_manual_run+0x324>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <fsm_manual_run+0x328>)
 80015f6:	6013      	str	r3, [r2, #0]
			}
			break;
 80015f8:	e161      	b.n	80018be <fsm_manual_run+0x4c6>


	//----------------------------------------------------------------------------------------------
	// MODE 3
		case MODE3:
			set_blinky(AUTO_AMBER);
 80015fa:	201f      	movs	r0, #31
 80015fc:	f7ff fd42 	bl	8001084 <set_blinky>

			index_led = 0;
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <fsm_manual_run+0x318>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
			updateBufferMode2();
 8001606:	f7ff fc51 	bl	8000eac <updateBufferMode2>
			update7SEG(index_led);
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <fsm_manual_run+0x318>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff faae 	bl	8000b70 <update7SEG>

			setTimer(2, 500);
 8001614:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001618:	2002      	movs	r0, #2
 800161a:	f000 fb91 	bl	8001d40 <setTimer>
			setTimer(3, 500);
 800161e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001622:	2003      	movs	r0, #3
 8001624:	f000 fb8c 	bl	8001d40 <setTimer>
			clearTimer(0);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fba7 	bl	8001d7c <clearTimer>
			clearTimer(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f000 fba4 	bl	8001d7c <clearTimer>

			status = AUTO_AMBER;
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <fsm_manual_run+0x314>)
 8001636:	221f      	movs	r2, #31
 8001638:	601a      	str	r2, [r3, #0]
			break;
 800163a:	e149      	b.n	80018d0 <fsm_manual_run+0x4d8>

		case AUTO_AMBER:
			if (timer_flag[3] == 1) {
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <fsm_manual_run+0x31c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <fsm_manual_run+0x25c>
				setTimer(3, 500);
 8001644:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fb79 	bl	8001d40 <setTimer>
				set_blinky(AUTO_AMBER);
 800164e:	201f      	movs	r0, #31
 8001650:	f7ff fd18 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <fsm_manual_run+0x31c>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10b      	bne.n	8001674 <fsm_manual_run+0x27c>
				setTimer(2, 500);
 800165c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001660:	2002      	movs	r0, #2
 8001662:	f000 fb6d 	bl	8001d40 <setTimer>
				updateBufferMode3();
 8001666:	f7ff fc4d 	bl	8000f04 <updateBufferMode3>
				update7SEG(index_led);
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <fsm_manual_run+0x318>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fa7e 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(0) == 1) {
 8001674:	2000      	movs	r0, #0
 8001676:	f000 f939 	bl	80018ec <check_button_pressed>
 800167a:	4603      	mov	r3, r0
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <fsm_manual_run+0x28e>
				status = MODE4;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <fsm_manual_run+0x314>)
 8001682:	2204      	movs	r2, #4
 8001684:	601a      	str	r2, [r3, #0]
			}
			if (check_button_pressed(1) == 1) {
 8001686:	2001      	movs	r0, #1
 8001688:	f000 f930 	bl	80018ec <check_button_pressed>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	f040 8117 	bne.w	80018c2 <fsm_manual_run+0x4ca>
				status = ADJ_AMBER;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <fsm_manual_run+0x314>)
 8001696:	2220      	movs	r2, #32
 8001698:	601a      	str	r2, [r3, #0]
				if (AMBER >= 5) AMBER = 1;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <fsm_manual_run+0x324>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	dd03      	ble.n	80016aa <fsm_manual_run+0x2b2>
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <fsm_manual_run+0x324>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
				else AMBER++;
			}
			break;
 80016a8:	e10b      	b.n	80018c2 <fsm_manual_run+0x4ca>
				else AMBER++;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <fsm_manual_run+0x324>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <fsm_manual_run+0x324>)
 80016b2:	6013      	str	r3, [r2, #0]
			break;
 80016b4:	e105      	b.n	80018c2 <fsm_manual_run+0x4ca>

		case ADJ_AMBER:
			if (timer_flag[3] == 1) {
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <fsm_manual_run+0x31c>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <fsm_manual_run+0x2d6>
				setTimer(3, 500);
 80016be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016c2:	2003      	movs	r0, #3
 80016c4:	f000 fb3c 	bl	8001d40 <setTimer>
				set_blinky(AUTO_AMBER);
 80016c8:	201f      	movs	r0, #31
 80016ca:	f7ff fcdb 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <fsm_manual_run+0x31c>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10b      	bne.n	80016ee <fsm_manual_run+0x2f6>
				setTimer(2, 500);
 80016d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016da:	2002      	movs	r0, #2
 80016dc:	f000 fb30 	bl	8001d40 <setTimer>
				updateBufferMode3();
 80016e0:	f7ff fc10 	bl	8000f04 <updateBufferMode3>
				update7SEG(index_led);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <fsm_manual_run+0x318>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fa41 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(1) == 1) {
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 f8fc 	bl	80018ec <check_button_pressed>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d119      	bne.n	800172e <fsm_manual_run+0x336>
				if (AMBER >= 5) AMBER = 1;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <fsm_manual_run+0x324>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	dd10      	ble.n	8001724 <fsm_manual_run+0x32c>
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <fsm_manual_run+0x324>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	e011      	b.n	800172e <fsm_manual_run+0x336>
 800170a:	bf00      	nop
 800170c:	20000050 	.word	0x20000050
 8001710:	2000004c 	.word	0x2000004c
 8001714:	20000080 	.word	0x20000080
 8001718:	20000018 	.word	0x20000018
 800171c:	2000001c 	.word	0x2000001c
 8001720:	20000020 	.word	0x20000020
				else AMBER++;
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <fsm_manual_run+0x4dc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	4a6a      	ldr	r2, [pc, #424]	; (80018d4 <fsm_manual_run+0x4dc>)
 800172c:	6013      	str	r3, [r2, #0]
			}
			if (check_button_pressed(2) == 1) {
 800172e:	2002      	movs	r0, #2
 8001730:	f000 f8dc 	bl	80018ec <check_button_pressed>
 8001734:	4603      	mov	r3, r0
 8001736:	2b01      	cmp	r3, #1
 8001738:	f040 80c5 	bne.w	80018c6 <fsm_manual_run+0x4ce>
				status = AUTO_AMBER;
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <fsm_manual_run+0x4e0>)
 800173e:	221f      	movs	r2, #31
 8001740:	601a      	str	r2, [r3, #0]
				if (RED <= AMBER) RED = AMBER + 1;
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <fsm_manual_run+0x4e4>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <fsm_manual_run+0x4dc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	dc04      	bgt.n	8001758 <fsm_manual_run+0x360>
 800174e:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <fsm_manual_run+0x4dc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4a61      	ldr	r2, [pc, #388]	; (80018dc <fsm_manual_run+0x4e4>)
 8001756:	6013      	str	r3, [r2, #0]
				GREEN = RED - AMBER;
 8001758:	4b60      	ldr	r3, [pc, #384]	; (80018dc <fsm_manual_run+0x4e4>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b5d      	ldr	r3, [pc, #372]	; (80018d4 <fsm_manual_run+0x4dc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a5f      	ldr	r2, [pc, #380]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001764:	6013      	str	r3, [r2, #0]
			}
			break;
 8001766:	e0ae      	b.n	80018c6 <fsm_manual_run+0x4ce>


	//----------------------------------------------------------------------------------------------
	// MODE 4
		case MODE4:
			set_blinky(AUTO_GREEN);
 8001768:	2029      	movs	r0, #41	; 0x29
 800176a:	f7ff fc8b 	bl	8001084 <set_blinky>

			index_led = 0;
 800176e:	4b5d      	ldr	r3, [pc, #372]	; (80018e4 <fsm_manual_run+0x4ec>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
			updateBufferMode2();
 8001774:	f7ff fb9a 	bl	8000eac <updateBufferMode2>
			update7SEG(index_led);
 8001778:	4b5a      	ldr	r3, [pc, #360]	; (80018e4 <fsm_manual_run+0x4ec>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f9f7 	bl	8000b70 <update7SEG>

			setTimer(2, 500);
 8001782:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001786:	2002      	movs	r0, #2
 8001788:	f000 fada 	bl	8001d40 <setTimer>
			setTimer(3, 500);
 800178c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fad5 	bl	8001d40 <setTimer>
			clearTimer(0);
 8001796:	2000      	movs	r0, #0
 8001798:	f000 faf0 	bl	8001d7c <clearTimer>
			clearTimer(1);
 800179c:	2001      	movs	r0, #1
 800179e:	f000 faed 	bl	8001d7c <clearTimer>

			status = AUTO_GREEN;
 80017a2:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <fsm_manual_run+0x4e0>)
 80017a4:	2229      	movs	r2, #41	; 0x29
 80017a6:	601a      	str	r2, [r3, #0]

			break;
 80017a8:	e092      	b.n	80018d0 <fsm_manual_run+0x4d8>

		case AUTO_GREEN:
			if (timer_flag[3] == 1) {
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <fsm_manual_run+0x4f0>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <fsm_manual_run+0x3ca>
				setTimer(3, 500);
 80017b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017b6:	2003      	movs	r0, #3
 80017b8:	f000 fac2 	bl	8001d40 <setTimer>
				set_blinky(AUTO_GREEN);
 80017bc:	2029      	movs	r0, #41	; 0x29
 80017be:	f7ff fc61 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <fsm_manual_run+0x4f0>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10b      	bne.n	80017e2 <fsm_manual_run+0x3ea>
				setTimer(2, 500);
 80017ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ce:	2002      	movs	r0, #2
 80017d0:	f000 fab6 	bl	8001d40 <setTimer>
				updateBufferMode4();
 80017d4:	f7ff fbc2 	bl	8000f5c <updateBufferMode4>
				update7SEG(index_led);
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <fsm_manual_run+0x4ec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f9c7 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(0) == 1) {
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f882 	bl	80018ec <check_button_pressed>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <fsm_manual_run+0x3fc>
				status = MODE1;
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <fsm_manual_run+0x4e0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
			}
			if (check_button_pressed(1) == 1) {
 80017f4:	2001      	movs	r0, #1
 80017f6:	f000 f879 	bl	80018ec <check_button_pressed>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d164      	bne.n	80018ca <fsm_manual_run+0x4d2>
				status = ADJ_GREEN;
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <fsm_manual_run+0x4e0>)
 8001802:	222a      	movs	r2, #42	; 0x2a
 8001804:	601a      	str	r2, [r3, #0]
				if (GREEN >= RED - AMBER) GREEN = 1;
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <fsm_manual_run+0x4e4>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <fsm_manual_run+0x4dc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	1ad2      	subs	r2, r2, r3
 8001810:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	dc03      	bgt.n	8001820 <fsm_manual_run+0x428>
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <fsm_manual_run+0x4e8>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]
				else GREEN++;
			}
			break;
 800181e:	e054      	b.n	80018ca <fsm_manual_run+0x4d2>
				else GREEN++;
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001828:	6013      	str	r3, [r2, #0]
			break;
 800182a:	e04e      	b.n	80018ca <fsm_manual_run+0x4d2>

		case ADJ_GREEN:
			if (timer_flag[3] == 1) {
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <fsm_manual_run+0x4f0>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <fsm_manual_run+0x44c>
				setTimer(3, 500);
 8001834:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001838:	2003      	movs	r0, #3
 800183a:	f000 fa81 	bl	8001d40 <setTimer>
				set_blinky(AUTO_GREEN);
 800183e:	2029      	movs	r0, #41	; 0x29
 8001840:	f7ff fc20 	bl	8001084 <set_blinky>
			}
			if (timer_flag[2] == 1) {
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <fsm_manual_run+0x4f0>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10b      	bne.n	8001864 <fsm_manual_run+0x46c>
				setTimer(2, 500);
 800184c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001850:	2002      	movs	r0, #2
 8001852:	f000 fa75 	bl	8001d40 <setTimer>
				updateBufferMode4();
 8001856:	f7ff fb81 	bl	8000f5c <updateBufferMode4>
				update7SEG(index_led);
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <fsm_manual_run+0x4ec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f986 	bl	8000b70 <update7SEG>
			}
			if (check_button_pressed(1) == 1) {
 8001864:	2001      	movs	r0, #1
 8001866:	f000 f841 	bl	80018ec <check_button_pressed>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d111      	bne.n	8001894 <fsm_manual_run+0x49c>
				if (GREEN >= RED - AMBER) GREEN = 1;
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <fsm_manual_run+0x4e4>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <fsm_manual_run+0x4dc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	1ad2      	subs	r2, r2, r3
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <fsm_manual_run+0x4e8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	dc03      	bgt.n	800188a <fsm_manual_run+0x492>
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e004      	b.n	8001894 <fsm_manual_run+0x49c>
				else GREEN++;
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <fsm_manual_run+0x4e8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <fsm_manual_run+0x4e8>)
 8001892:	6013      	str	r3, [r2, #0]
			}
			if (check_button_pressed(2) == 1) {
 8001894:	2002      	movs	r0, #2
 8001896:	f000 f829 	bl	80018ec <check_button_pressed>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	d116      	bne.n	80018ce <fsm_manual_run+0x4d6>
				status = AUTO_GREEN;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <fsm_manual_run+0x4e0>)
 80018a2:	2229      	movs	r2, #41	; 0x29
 80018a4:	601a      	str	r2, [r3, #0]
				RED = GREEN + AMBER;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <fsm_manual_run+0x4e8>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <fsm_manual_run+0x4dc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <fsm_manual_run+0x4e4>)
 80018b2:	6013      	str	r3, [r2, #0]
			}
			break;
 80018b4:	e00b      	b.n	80018ce <fsm_manual_run+0x4d6>


	//--------------------------------------------------------------------------------------
	// DEFAULT
		default:
			break;
 80018b6:	bf00      	nop
 80018b8:	e00a      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018ba:	bf00      	nop
 80018bc:	e008      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018be:	bf00      	nop
 80018c0:	e006      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018c2:	bf00      	nop
 80018c4:	e004      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <fsm_manual_run+0x4d8>
			break;
 80018ce:	bf00      	nop
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20000050 	.word	0x20000050
 80018dc:	20000018 	.word	0x20000018
 80018e0:	20000020 	.word	0x20000020
 80018e4:	2000004c 	.word	0x2000004c
 80018e8:	20000080 	.word	0x20000080

080018ec <check_button_pressed>:
static	uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static	uint16_t counterForButtonPress1s[NO_OF_BUTTONS];

int button_flag[NO_OF_BUTTONS];

int check_button_pressed(int i) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    if (button_flag[i] == 1) {
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <check_button_pressed+0x30>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d106      	bne.n	800190e <check_button_pressed+0x22>
        button_flag[i] = 0;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <check_button_pressed+0x30>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2100      	movs	r1, #0
 8001906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <check_button_pressed+0x24>
    }
    return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000090 	.word	0x20000090

08001920 <button_reading>:

void button_reading(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e0a0      	b.n	8001a6e <button_reading+0x14e>
        debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <button_reading+0x160>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	7819      	ldrb	r1, [r3, #0]
 8001934:	4a53      	ldr	r2, [pc, #332]	; (8001a84 <button_reading+0x164>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	460a      	mov	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800193e:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <button_reading+0x168>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	7819      	ldrb	r1, [r3, #0]
 8001946:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <button_reading+0x160>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
        switch (i) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d021      	beq.n	800199a <button_reading+0x7a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	dc2a      	bgt.n	80019b2 <button_reading+0x92>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <button_reading+0x4a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d00c      	beq.n	8001982 <button_reading+0x62>
                break;
            case 2:
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
                break;
            default:
                break;
 8001968:	e023      	b.n	80019b2 <button_reading+0x92>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800196a:	2102      	movs	r1, #2
 800196c:	4847      	ldr	r0, [pc, #284]	; (8001a8c <button_reading+0x16c>)
 800196e:	f000 fdeb 	bl	8002548 <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	4a44      	ldr	r2, [pc, #272]	; (8001a88 <button_reading+0x168>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	460a      	mov	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
                break;
 8001980:	e018      	b.n	80019b4 <button_reading+0x94>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(ADJ_GPIO_Port, ADJ_Pin);
 8001982:	2104      	movs	r1, #4
 8001984:	4841      	ldr	r0, [pc, #260]	; (8001a8c <button_reading+0x16c>)
 8001986:	f000 fddf 	bl	8002548 <HAL_GPIO_ReadPin>
 800198a:	4603      	mov	r3, r0
 800198c:	4619      	mov	r1, r3
 800198e:	4a3e      	ldr	r2, [pc, #248]	; (8001a88 <button_reading+0x168>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	460a      	mov	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
                break;
 8001998:	e00c      	b.n	80019b4 <button_reading+0x94>
                debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 800199a:	2108      	movs	r1, #8
 800199c:	483b      	ldr	r0, [pc, #236]	; (8001a8c <button_reading+0x16c>)
 800199e:	f000 fdd3 	bl	8002548 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4619      	mov	r1, r3
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <button_reading+0x168>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
                break;
 80019b0:	e000      	b.n	80019b4 <button_reading+0x94>
                break;
 80019b2:	bf00      	nop
        }
        if ((debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer1[i] == debounceButtonBuffer3[i])) {
 80019b4:	4a34      	ldr	r2, [pc, #208]	; (8001a88 <button_reading+0x168>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	781a      	ldrb	r2, [r3, #0]
 80019bc:	4930      	ldr	r1, [pc, #192]	; (8001a80 <button_reading+0x160>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	440b      	add	r3, r1
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d123      	bne.n	8001a10 <button_reading+0xf0>
 80019c8:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <button_reading+0x168>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	492c      	ldr	r1, [pc, #176]	; (8001a84 <button_reading+0x164>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	440b      	add	r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d119      	bne.n	8001a10 <button_reading+0xf0>
            if (buttonBuffer[i] == BUTTON_IS_RELEASED && debounceButtonBuffer1[i] == BUTTON_IS_PRESSED) {
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <button_reading+0x170>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d10a      	bne.n	80019fe <button_reading+0xde>
 80019e8:	4a27      	ldr	r2, [pc, #156]	; (8001a88 <button_reading+0x168>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d104      	bne.n	80019fe <button_reading+0xde>
                button_flag[i] = 1;
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <button_reading+0x174>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2101      	movs	r1, #1
 80019fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            }
            buttonBuffer[i] = debounceButtonBuffer1[i];
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <button_reading+0x168>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	7819      	ldrb	r1, [r3, #0]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <button_reading+0x170>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
        }
        if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <button_reading+0x170>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d116      	bne.n	8001a4a <button_reading+0x12a>
            if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 8001a1c:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <button_reading+0x178>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a24:	2b63      	cmp	r3, #99	; 0x63
 8001a26:	d80a      	bhi.n	8001a3e <button_reading+0x11e>
                counterForButtonPress1s[i]++;
 8001a28:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <button_reading+0x178>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a30:	3301      	adds	r3, #1
 8001a32:	b299      	uxth	r1, r3
 8001a34:	4a18      	ldr	r2, [pc, #96]	; (8001a98 <button_reading+0x178>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a3c:	e014      	b.n	8001a68 <button_reading+0x148>
            } else {
                flagForButtonPress1s[i] = 1;
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <button_reading+0x17c>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	e00e      	b.n	8001a68 <button_reading+0x148>
            }
        } else {
            button_flag[i] = 0;
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <button_reading+0x174>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            counterForButtonPress1s[i] = 0;
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <button_reading+0x178>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            flagForButtonPress1s[i] = 0;
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	; (8001a9c <button_reading+0x17c>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	f77f af5b 	ble.w	800192c <button_reading+0xc>
        }
    }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000005c 	.word	0x2000005c
 8001a84:	20000060 	.word	0x20000060
 8001a88:	20000058 	.word	0x20000058
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	20000054 	.word	0x20000054
 8001a94:	20000090 	.word	0x20000090
 8001a98:	20000068 	.word	0x20000068
 8001a9c:	20000064 	.word	0x20000064

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa4:	f000 fa66 	bl	8001f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa8:	f000 f80e 	bl	8001ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aac:	f000 f8d4 	bl	8001c58 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ab0:	f000 f846 	bl	8001b40 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <main+0x24>)
 8001ab6:	f001 f9bb 	bl	8002e30 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	fsm_automatic_run();
 8001aba:	f7ff fb4d 	bl	8001158 <fsm_automatic_run>
	fsm_manual_run();
 8001abe:	f7ff fc9b 	bl	80013f8 <fsm_manual_run>
	fsm_automatic_run();
 8001ac2:	e7fa      	b.n	8001aba <main+0x1a>
 8001ac4:	2000009c 	.word	0x2000009c

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b090      	sub	sp, #64	; 0x40
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0318 	add.w	r3, r7, #24
 8001ad2:	2228      	movs	r2, #40	; 0x28
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fd66 	bl	80035a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af2:	2310      	movs	r3, #16
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001afa:	f107 0318 	add.w	r3, r7, #24
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fd6a 	bl	80025d8 <HAL_RCC_OscConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001b0a:	f000 f913 	bl	8001d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b0e:	230f      	movs	r3, #15
 8001b10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 ffd6 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001b32:	f000 f8ff 	bl	8001d34 <Error_Handler>
  }
}
 8001b36:	bf00      	nop
 8001b38:	3740      	adds	r7, #64	; 0x40
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001b64:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b66:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001b72:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b74:	2209      	movs	r2, #9
 8001b76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b84:	4830      	ldr	r0, [pc, #192]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001b86:	f001 f903 	bl	8002d90 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b90:	f000 f8d0 	bl	8001d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4829      	ldr	r0, [pc, #164]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001ba2:	f001 fa99 	bl	80030d8 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bac:	f000 f8c2 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4822      	ldr	r0, [pc, #136]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001bbe:	f001 fc65 	bl	800348c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bc8:	f000 f8b4 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIME_CYCLE = 1/(8e6/(htim2.Init.Prescaler + 1)/(htim2.Init.Period + 1)) * 1000;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fbfe 	bl	80003d4 <__aeabi_ui2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	a118      	add	r1, pc, #96	; (adr r1, 8001c40 <MX_TIM2_Init+0x100>)
 8001bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001be2:	f7fe fd9b 	bl	800071c <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <MX_TIM2_Init+0x108>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fbed 	bl	80003d4 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fd8b 	bl	800071c <__aeabi_ddiv>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	f04f 0000 	mov.w	r0, #0
 8001c0e:	490f      	ldr	r1, [pc, #60]	; (8001c4c <MX_TIM2_Init+0x10c>)
 8001c10:	f7fe fd84 	bl	800071c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_TIM2_Init+0x110>)
 8001c22:	f7fe fc51 	bl	80004c8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe fe5d 	bl	80008ec <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <MX_TIM2_Init+0x114>)
 8001c36:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c40:	00000000 	.word	0x00000000
 8001c44:	415e8480 	.word	0x415e8480
 8001c48:	2000009c 	.word	0x2000009c
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	408f4000 	.word	0x408f4000
 8001c54:	200000e4 	.word	0x200000e4

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <MX_GPIO_Init+0xb8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R1_Pin|A1_Pin|G1_Pin|R2_Pin
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8001ca2:	481c      	ldr	r0, [pc, #112]	; (8001d14 <MX_GPIO_Init+0xbc>)
 8001ca4:	f000 fc67 	bl	8002576 <HAL_GPIO_WritePin>
                          |A2_Pin|G2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1a_Pin|SEG1b_Pin|SEG1c_Pin|SEG2d_Pin
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001cae:	481a      	ldr	r0, [pc, #104]	; (8001d18 <MX_GPIO_Init+0xc0>)
 8001cb0:	f000 fc61 	bl	8002576 <HAL_GPIO_WritePin>
                          |SEG2e_Pin|SEG2f_Pin|SEG2g_Pin|SEG1d_Pin
                          |SEG1e_Pin|SEG1f_Pin|SEG1g_Pin|SEG2a_Pin
                          |SEG2b_Pin|SEG2c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MODE_Pin ADJ_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADJ_Pin|SET_Pin;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <MX_GPIO_Init+0xbc>)
 8001cc8:	f000 fac4 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = R1_Pin|A1_Pin|G1_Pin|R2_Pin
 8001ccc:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8001cd0:	60bb      	str	r3, [r7, #8]
                          |A2_Pin|G2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480b      	ldr	r0, [pc, #44]	; (8001d14 <MX_GPIO_Init+0xbc>)
 8001ce6:	f000 fab5 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1a_Pin SEG1b_Pin SEG1c_Pin SEG2d_Pin
                           SEG2e_Pin SEG2f_Pin SEG2g_Pin SEG1d_Pin
                           SEG1e_Pin SEG1f_Pin SEG1g_Pin SEG2a_Pin
                           SEG2b_Pin SEG2c_Pin */
  GPIO_InitStruct.Pin = SEG1a_Pin|SEG1b_Pin|SEG1c_Pin|SEG2d_Pin
 8001cea:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001cee:	60bb      	str	r3, [r7, #8]
                          |SEG2e_Pin|SEG2f_Pin|SEG2g_Pin|SEG1d_Pin
                          |SEG1e_Pin|SEG1f_Pin|SEG1g_Pin|SEG2a_Pin
                          |SEG2b_Pin|SEG2c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <MX_GPIO_Init+0xc0>)
 8001d04:	f000 faa6 	bl	8002254 <HAL_GPIO_Init>

}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00

08001d1c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	timerRun();
 8001d24:	f000 f842 	bl	8001dac <timerRun>
	button_reading();
 8001d28:	f7ff fdfa 	bl	8001920 <button_reading>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <setTimer>:
int TIME_CYCLE;

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <setTimer+0x30>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	fb92 f2f3 	sdiv	r2, r2, r3
 8001d54:	4907      	ldr	r1, [pc, #28]	; (8001d74 <setTimer+0x34>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <setTimer+0x38>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2100      	movs	r1, #0
 8001d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	200000e4 	.word	0x200000e4
 8001d74:	20000070 	.word	0x20000070
 8001d78:	20000080 	.word	0x20000080

08001d7c <clearTimer>:

void clearTimer(int index) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <clearTimer+0x28>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001d8e:	4a06      	ldr	r2, [pc, #24]	; (8001da8 <clearTimer+0x2c>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2100      	movs	r1, #0
 8001d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000070 	.word	0x20000070
 8001da8:	20000080 	.word	0x20000080

08001dac <timerRun>:

void timerRun(){
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e01c      	b.n	8001df2 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <timerRun+0x58>)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd13      	ble.n	8001dec <timerRun+0x40>
			timer_counter[i]--;
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <timerRun+0x58>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	490d      	ldr	r1, [pc, #52]	; (8001e04 <timerRun+0x58>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <timerRun+0x58>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dc04      	bgt.n	8001dec <timerRun+0x40>
				timer_flag[i] = 1;
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <timerRun+0x5c>)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2101      	movs	r1, #1
 8001de8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	dddf      	ble.n	8001db8 <timerRun+0xc>
			}
		}
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	20000070 	.word	0x20000070
 8001e08:	20000080 	.word	0x20000080

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6193      	str	r3, [r2, #24]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x5c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_MspInit+0x60>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_MspInit+0x60>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40010000 	.word	0x40010000

08001e70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d113      	bne.n	8001eaa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_TIM_Base_MspInit+0x44>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_TIM_Base_MspInit+0x44>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_TIM_Base_MspInit+0x44>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	201c      	movs	r0, #28
 8001ea0:	f000 f9a1 	bl	80021e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea4:	201c      	movs	r0, #28
 8001ea6:	f000 f9ba 	bl	800221e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f87f 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <TIM2_IRQHandler+0x10>)
 8001f0e:	f000 ffdb 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000009c 	.word	0x2000009c

08001f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr

08001f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f28:	f7ff fff8 	bl	8001f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2e:	490c      	ldr	r1, [pc, #48]	; (8001f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f44:	4c09      	ldr	r4, [pc, #36]	; (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f001 fb05 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7ff fda3 	bl	8001aa0 <main>
  bx lr
 8001f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001f64:	08003608 	.word	0x08003608
  ldr r2, =_sbss
 8001f68:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001f6c:	200000ec 	.word	0x200000ec

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x28>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x28>)
 8001f7e:	f043 0310 	orr.w	r3, r3, #16
 8001f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f923 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff ff3c 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f93b 	bl	800223a <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f903 	bl	80021e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000024 	.word	0x20000024
 8001ff8:	2000002c 	.word	0x2000002c
 8001ffc:	20000028 	.word	0x20000028

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_IncTick+0x20>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	2000002c 	.word	0x2000002c
 8002020:	200000e8 	.word	0x200000e8

08002024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	200000e8 	.word	0x200000e8

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db0b      	blt.n	80020c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	f003 021f 	and.w	r2, r3, #31
 80020b4:	4906      	ldr	r1, [pc, #24]	; (80020d0 <__NVIC_EnableIRQ+0x34>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2001      	movs	r0, #1
 80020be:	fa00 f202 	lsl.w	r2, r0, r2
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff90 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff2d 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff42 	bl	8002080 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff90 	bl	8002128 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5f 	bl	80020d4 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff35 	bl	800209c <__NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffa2 	bl	800218c <SysTick_Config>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b08b      	sub	sp, #44	; 0x2c
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e148      	b.n	80024fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002268:	2201      	movs	r2, #1
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8137 	bne.w	80024f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4aa3      	ldr	r2, [pc, #652]	; (8002518 <HAL_GPIO_Init+0x2c4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d05e      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 8002290:	4aa1      	ldr	r2, [pc, #644]	; (8002518 <HAL_GPIO_Init+0x2c4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d875      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 8002296:	4aa1      	ldr	r2, [pc, #644]	; (800251c <HAL_GPIO_Init+0x2c8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d058      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 800229c:	4a9f      	ldr	r2, [pc, #636]	; (800251c <HAL_GPIO_Init+0x2c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d86f      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022a2:	4a9f      	ldr	r2, [pc, #636]	; (8002520 <HAL_GPIO_Init+0x2cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d052      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022a8:	4a9d      	ldr	r2, [pc, #628]	; (8002520 <HAL_GPIO_Init+0x2cc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d869      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ae:	4a9d      	ldr	r2, [pc, #628]	; (8002524 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04c      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022b4:	4a9b      	ldr	r2, [pc, #620]	; (8002524 <HAL_GPIO_Init+0x2d0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d863      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ba:	4a9b      	ldr	r2, [pc, #620]	; (8002528 <HAL_GPIO_Init+0x2d4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d046      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022c0:	4a99      	ldr	r2, [pc, #612]	; (8002528 <HAL_GPIO_Init+0x2d4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d85d      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d82a      	bhi.n	8002320 <HAL_GPIO_Init+0xcc>
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d859      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ce:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <HAL_GPIO_Init+0x80>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	0800234f 	.word	0x0800234f
 80022d8:	08002329 	.word	0x08002329
 80022dc:	0800233b 	.word	0x0800233b
 80022e0:	0800237d 	.word	0x0800237d
 80022e4:	08002383 	.word	0x08002383
 80022e8:	08002383 	.word	0x08002383
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002383 	.word	0x08002383
 80022f4:	08002383 	.word	0x08002383
 80022f8:	08002383 	.word	0x08002383
 80022fc:	08002383 	.word	0x08002383
 8002300:	08002383 	.word	0x08002383
 8002304:	08002383 	.word	0x08002383
 8002308:	08002383 	.word	0x08002383
 800230c:	08002383 	.word	0x08002383
 8002310:	08002383 	.word	0x08002383
 8002314:	08002383 	.word	0x08002383
 8002318:	08002331 	.word	0x08002331
 800231c:	08002345 	.word	0x08002345
 8002320:	4a82      	ldr	r2, [pc, #520]	; (800252c <HAL_GPIO_Init+0x2d8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002326:	e02c      	b.n	8002382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e029      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	3304      	adds	r3, #4
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e024      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	3308      	adds	r3, #8
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e01f      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	330c      	adds	r3, #12
 800234a:	623b      	str	r3, [r7, #32]
          break;
 800234c:	e01a      	b.n	8002384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002356:	2304      	movs	r3, #4
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e013      	b.n	8002384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	611a      	str	r2, [r3, #16]
          break;
 800236e:	e009      	b.n	8002384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002370:	2308      	movs	r3, #8
 8002372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	615a      	str	r2, [r3, #20]
          break;
 800237a:	e003      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x130>
          break;
 8002382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d801      	bhi.n	800238e <HAL_GPIO_Init+0x13a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_Init+0x13e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d802      	bhi.n	80023a0 <HAL_GPIO_Init+0x14c>
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x152>
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	3b08      	subs	r3, #8
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	210f      	movs	r1, #15
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8090 	beq.w	80024f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d4:	4b56      	ldr	r3, [pc, #344]	; (8002530 <HAL_GPIO_Init+0x2dc>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a55      	ldr	r2, [pc, #340]	; (8002530 <HAL_GPIO_Init+0x2dc>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_GPIO_Init+0x2dc>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ec:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x2e0>)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a49      	ldr	r2, [pc, #292]	; (8002538 <HAL_GPIO_Init+0x2e4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a48      	ldr	r2, [pc, #288]	; (800253c <HAL_GPIO_Init+0x2e8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1dc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_GPIO_Init+0x2ec>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1d8>
 8002428:	2302      	movs	r3, #2
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 800242c:	2303      	movs	r3, #3
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	493b      	ldr	r1, [pc, #236]	; (8002534 <HAL_GPIO_Init+0x2e0>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4937      	ldr	r1, [pc, #220]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4933      	ldr	r1, [pc, #204]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	492d      	ldr	r1, [pc, #180]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	4929      	ldr	r1, [pc, #164]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4923      	ldr	r1, [pc, #140]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	491f      	ldr	r1, [pc, #124]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4919      	ldr	r1, [pc, #100]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4915      	ldr	r1, [pc, #84]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	3301      	adds	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f aeaf 	bne.w	8002268 <HAL_GPIO_Init+0x14>
  }
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	372c      	adds	r7, #44	; 0x2c
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	10320000 	.word	0x10320000
 800251c:	10310000 	.word	0x10310000
 8002520:	10220000 	.word	0x10220000
 8002524:	10210000 	.word	0x10210000
 8002528:	10120000 	.word	0x10120000
 800252c:	10110000 	.word	0x10110000
 8002530:	40021000 	.word	0x40021000
 8002534:	40010000 	.word	0x40010000
 8002538:	40010800 	.word	0x40010800
 800253c:	40010c00 	.word	0x40010c00
 8002540:	40011000 	.word	0x40011000
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e001      	b.n	800256a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256a:	7bfb      	ldrb	r3, [r7, #15]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	807b      	strh	r3, [r7, #2]
 8002582:	4613      	mov	r3, r2
 8002584:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002586:	787b      	ldrb	r3, [r7, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258c:	887a      	ldrh	r2, [r7, #2]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002592:	e003      	b.n	800259c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	041a      	lsls	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	611a      	str	r2, [r3, #16]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43d9      	mvns	r1, r3
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	400b      	ands	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e26c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00c      	beq.n	800261e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d112      	bne.n	8002636 <HAL_RCC_OscConfig+0x5e>
 8002610:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d10b      	bne.n	8002636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261e:	4b89      	ldr	r3, [pc, #548]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d06c      	beq.n	8002704 <HAL_RCC_OscConfig+0x12c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d168      	bne.n	8002704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e246      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x76>
 8002640:	4b80      	ldr	r3, [pc, #512]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7f      	ldr	r2, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e02e      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7a      	ldr	r2, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b78      	ldr	r3, [pc, #480]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a77      	ldr	r2, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0xbc>
 800267a:	4b72      	ldr	r3, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a71      	ldr	r2, [pc, #452]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 8002694:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff fcb6 	bl	8002024 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff fcb2 	bl	8002024 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1fa      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xe4>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fca2 	bl	8002024 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff fc9e 	bl	8002024 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1e6      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x10c>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002712:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x18c>
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x176>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1ba      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4939      	ldr	r1, [pc, #228]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x270>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff fc57 	bl	8002024 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff fc53 	bl	8002024 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e19b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4927      	ldr	r1, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCC_OscConfig+0x270>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fc36 	bl	8002024 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7ff fc32 	bl	8002024 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e17a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03a      	beq.n	800285c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7ff fc16 	bl	8002024 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff fc12 	bl	8002024 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e15a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f000 fa9a 	bl	8002d54 <RCC_Delay>
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff fbfc 	bl	8002024 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282e:	e00f      	b.n	8002850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fbf8 	bl	8002024 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d908      	bls.n	8002850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e140      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	42420000 	.word	0x42420000
 800284c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e9      	bne.n	8002830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a6 	beq.w	80029b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b97      	ldr	r3, [pc, #604]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a93      	ldr	r2, [pc, #588]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b91      	ldr	r3, [pc, #580]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b8e      	ldr	r3, [pc, #568]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a8a      	ldr	r2, [pc, #552]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7ff fbb9 	bl	8002024 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7ff fbb5 	bl	8002024 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0fd      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x312>
 80028dc:	4b7b      	ldr	r3, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e02d      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x334>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	e01c      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x356>
 8002914:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a6c      	ldr	r2, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a69      	ldr	r2, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	e00b      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a66      	ldr	r2, [pc, #408]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7ff fb69 	bl	8002024 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7ff fb65 	bl	8002024 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0ab      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ee      	beq.n	8002956 <HAL_RCC_OscConfig+0x37e>
 8002978:	e014      	b.n	80029a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff fb53 	bl	8002024 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7ff fb4f 	bl	8002024 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e095      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a47      	ldr	r2, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8081 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d061      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d146      	bne.n	8002a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7ff fb23 	bl	8002024 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7ff fb1f 	bl	8002024 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e067      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d108      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a19      	ldr	r1, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	4927      	ldr	r1, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7ff faf3 	bl	8002024 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7ff faef 	bl	8002024 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e037      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x46a>
 8002a60:	e02f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fadc 	bl	8002024 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7ff fad8 	bl	8002024 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e020      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x498>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e013      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42420060 	.word	0x42420060

08002ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7ff fa2c 	bl	8002024 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7ff fa28 	bl	8002024 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f98a 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	080035dc 	.word	0x080035dc
 8002ca4:	20000024 	.word	0x20000024
 8002ca8:	20000028 	.word	0x20000028

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e027      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e027      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	fb02 f203 	mul.w	r2, r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e004      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	613b      	str	r3, [r7, #16]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	693b      	ldr	r3, [r7, #16]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	080035ec 	.word	0x080035ec
 8002d4c:	080035fc 	.word	0x080035fc
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <RCC_Delay+0x34>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <RCC_Delay+0x38>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d70:	bf00      	nop
  }
  while (Delay --);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <RCC_Delay+0x1c>
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	20000024 	.word	0x20000024
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e041      	b.n	8002e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff f85a 	bl	8001e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f000 fa6e 	bl	80032b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e035      	b.n	8002eb4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_TIM_Base_Start_IT+0x90>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_TIM_Base_Start_IT+0x4e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_Base_Start_IT+0x4e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_TIM_Base_Start_IT+0x94>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d010      	beq.n	8002eb2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	e007      	b.n	8002eb2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40012c00 	.word	0x40012c00
 8002ec4:	40000400 	.word	0x40000400

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9b4 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9a7 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9b6 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f98a 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f97d 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f98c 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f960 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f953 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f962 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f936 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f929 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f938 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fe68 	bl	8001d1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa6b 	bl	800354e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8fc 	bl	800329c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0220 	mvn.w	r2, #32
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa36 	bl	800353c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_ConfigClockSource+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e0b4      	b.n	800325e <HAL_TIM_ConfigClockSource+0x186>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003112:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312c:	d03e      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0xd4>
 800312e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003132:	f200 8087 	bhi.w	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313a:	f000 8086 	beq.w	800324a <HAL_TIM_ConfigClockSource+0x172>
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d87f      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b70      	cmp	r3, #112	; 0x70
 8003146:	d01a      	beq.n	800317e <HAL_TIM_ConfigClockSource+0xa6>
 8003148:	2b70      	cmp	r3, #112	; 0x70
 800314a:	d87b      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b60      	cmp	r3, #96	; 0x60
 800314e:	d050      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003150:	2b60      	cmp	r3, #96	; 0x60
 8003152:	d877      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b50      	cmp	r3, #80	; 0x50
 8003156:	d03c      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003158:	2b50      	cmp	r3, #80	; 0x50
 800315a:	d873      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d058      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0x13a>
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d86f      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b30      	cmp	r3, #48	; 0x30
 8003166:	d064      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x15a>
 8003168:	2b30      	cmp	r3, #48	; 0x30
 800316a:	d86b      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b20      	cmp	r3, #32
 800316e:	d060      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x15a>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d867      	bhi.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d05c      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x15a>
 8003178:	2b10      	cmp	r3, #16
 800317a:	d05a      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	e062      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f000 f95e 	bl	800344e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	609a      	str	r2, [r3, #8]
      break;
 80031aa:	e04f      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f000 f947 	bl	800344e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ce:	609a      	str	r2, [r3, #8]
      break;
 80031d0:	e03c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6859      	ldr	r1, [r3, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	461a      	mov	r2, r3
 80031e0:	f000 f8be 	bl	8003360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2150      	movs	r1, #80	; 0x50
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f915 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 80031f0:	e02c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	6859      	ldr	r1, [r3, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	461a      	mov	r2, r3
 8003200:	f000 f8dc 	bl	80033bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2160      	movs	r1, #96	; 0x60
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f905 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003210:	e01c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	461a      	mov	r2, r3
 8003220:	f000 f89e 	bl	8003360 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f8f5 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003230:	e00c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f000 f8ec 	bl	800341a <TIM_ITRx_SetConfig>
      break;
 8003242:	e003      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      break;
 8003248:	e000      	b.n	800324c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800324a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a25      	ldr	r2, [pc, #148]	; (8003358 <TIM_Base_SetConfig+0xa8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x28>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x28>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a22      	ldr	r2, [pc, #136]	; (800335c <TIM_Base_SetConfig+0xac>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <TIM_Base_SetConfig+0xa8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d007      	beq.n	8003302 <TIM_Base_SetConfig+0x52>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d003      	beq.n	8003302 <TIM_Base_SetConfig+0x52>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <TIM_Base_SetConfig+0xac>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d108      	bne.n	8003314 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <TIM_Base_SetConfig+0xa8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d103      	bne.n	8003348 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	615a      	str	r2, [r3, #20]
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40000400 	.word	0x40000400

08003360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f023 030a 	bic.w	r3, r3, #10
 800339c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 0210 	bic.w	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4313      	orrs	r3, r2
 8003402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	621a      	str	r2, [r3, #32]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	f043 0307 	orr.w	r3, r3, #7
 800343c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800344e:	b480      	push	{r7}
 8003450:	b087      	sub	sp, #28
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003468:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	431a      	orrs	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4313      	orrs	r3, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	609a      	str	r2, [r3, #8]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e041      	b.n	8003528 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a14      	ldr	r2, [pc, #80]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d004      	beq.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a10      	ldr	r2, [pc, #64]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d10c      	bne.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4313      	orrs	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40012c00 	.word	0x40012c00
 8003538:	40000400 	.word	0x40000400

0800353c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	2600      	movs	r6, #0
 8003564:	4d0c      	ldr	r5, [pc, #48]	; (8003598 <__libc_init_array+0x38>)
 8003566:	4c0d      	ldr	r4, [pc, #52]	; (800359c <__libc_init_array+0x3c>)
 8003568:	1b64      	subs	r4, r4, r5
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	f000 f822 	bl	80035b8 <_init>
 8003574:	2600      	movs	r6, #0
 8003576:	4d0a      	ldr	r5, [pc, #40]	; (80035a0 <__libc_init_array+0x40>)
 8003578:	4c0a      	ldr	r4, [pc, #40]	; (80035a4 <__libc_init_array+0x44>)
 800357a:	1b64      	subs	r4, r4, r5
 800357c:	10a4      	asrs	r4, r4, #2
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f855 3b04 	ldr.w	r3, [r5], #4
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	08003600 	.word	0x08003600
 800359c:	08003600 	.word	0x08003600
 80035a0:	08003600 	.word	0x08003600
 80035a4:	08003604 	.word	0x08003604

080035a8 <memset>:
 80035a8:	4603      	mov	r3, r0
 80035aa:	4402      	add	r2, r0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d100      	bne.n	80035b2 <memset+0xa>
 80035b0:	4770      	bx	lr
 80035b2:	f803 1b01 	strb.w	r1, [r3], #1
 80035b6:	e7f9      	b.n	80035ac <memset+0x4>

080035b8 <_init>:
 80035b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ba:	bf00      	nop
 80035bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035be:	bc08      	pop	{r3}
 80035c0:	469e      	mov	lr, r3
 80035c2:	4770      	bx	lr

080035c4 <_fini>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	bf00      	nop
 80035c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ca:	bc08      	pop	{r3}
 80035cc:	469e      	mov	lr, r3
 80035ce:	4770      	bx	lr
